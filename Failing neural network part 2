import numpy as np
import tensorflow as tf
import json
import os
import sys
import shutil
import matplotlib.pyplot as plt

outputFile = open('el.txt','w')

def Euler(xa, xb, ya, n):
    eachPoint=[]
    h = (xb - xa) / (n)
    x = xa
    y = ya
    for i in range(n):
        y += h * f(x)
        x += h
        eachPoint.append(y)
    return eachPoint

def f(x):
    dxdt=tf.log(x)
    return dxdt



x = np.asarray([4.,5.,6.,7.,8.,9.])
y = np.asarray([4.577656,5.577656,6.577656,7.577656,8.577642,9.577642])
x.shape=[1,6]
y.shape=[1,6]
# print(type(x))
# x = tf.reshape(x, [1,x.shape[0]])
# y = tf.reshape(y, [1,y.shape[0]])
x = x.reshape(1,x.shape[1])
y = y.reshape(1,y.shape[1])

tf_x = tf.placeholder(tf.float32, x.shape)      # input x
tf_y = tf.placeholder(tf.float32, y.shape)      # input y# neural network layers


# neural network layers
output= tf.layers.dense(tf_x, 10, tf.nn.relu)          # hidden layer

output = tf.layers.dense(output, y.shape[1])   

loss = tf.losses.mean_squared_error(tf_y, output)   # compute cost
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.5)
train_op = optimizer.minimize(loss) 

sess = tf.Session()                                 # control training and others
sess.run(tf.global_variables_initializer())         # initialize var in graph



for step in range(1000):
    # train and net output

        #newdata
    _, l, pred = sess.run([train_op, loss, output], {tf_x: x, tf_y: y})



    
    



y=Euler(1.0,10.0,x_tf,10)
a = np.zeros(shape=(len(x),10))

sess=tf.Session()
y=sess.run([y],{x_tf:x})
sess.close()

for i in range(0,10,1):
   # print(y[0][i])
    wline = str(y[0][i]) + "\n"
    outputFile.write(wline)

outputFile.close()

sess=tf.Session()

temp=np.asarray([1.,2.,3.,4.,5.,6.])
temp=temp.reshape(1,6)
print(temp.shape,temp.dtype)
for i in range (1,10,1):
    
    
    next=sess.run([output],{tf_x:x}) #We keep getting the input as not matching dtype= float and shape not equaling (1,6), even though when we print them out it does.
    print('ok')
    temp=next
    

sess.close()
    
